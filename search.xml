<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2020/05/09/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<a id="more"></a>

<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>hello</category>
        <category>a</category>
      </categories>
  </entry>
  <entry>
    <title>200517</title>
    <url>/2020/05/17/200517/</url>
    <content><![CDATA[<p><img src="/2020/05/17/200517/image-20200517173258443.png" alt></p>
]]></content>
      <categories>
        <category>hello</category>
        <category>分类C</category>
        <category>分类D</category>
        <category>b</category>
      </categories>
      <tags>
        <tag>Segmentation</tag>
        <tag>brain</tag>
      </tags>
  </entry>
  <entry>
    <title>阅读论文 “Large Scale Image Segmentation with Structured Loss based Deep Learning forConnectome Reconstruction” （MALA-TPAMI18)</title>
    <url>/2020/05/17/%E9%98%85%E8%AF%BB%E8%AE%BA%E6%96%87%20MALA-TPAMI/</url>
    <content><![CDATA[<p><img src="/2020/05/17/%E9%98%85%E8%AF%BB%E8%AE%BA%E6%96%87%20MALA-TPAMI/image-20200510153223855.png" alt></p>
<a id="more"></a>

<p>tag：EM，分割，神经元</p>
<p>特点：既可以用在isotropic block-face EM data，又可以用在 anisotropic serial sectioned EM data</p>
<p>task是神经元分割</p>
<p>输出是边界概率</p>
<p>结合了亲和图预测</p>
<p>3D unet：预测voxels之间的亲和图，然后是迭代区域聚集</p>
<ol>
<li>用3D U-Net预测3D 亲和图(affinity graphs)，loss是基于MALIS的structured loss，来最小化拓扑误差</li>
<li>改进原来的MALIS loss function：在所有predicted的亲和图上预测梯度，而不是稀疏得采样。这样使得梯度计算更快更dense<ol>
<li>并且分两遍计算MALIS损失：在正遍中，将GT区域之间和GT区域外的亲和图限制为0；在负遍中，将区域内的亲和图设置为1。</li>
</ol>
</li>
<li></li>
</ol>
]]></content>
      <tags>
        <tag>Segmentation</tag>
      </tags>
  </entry>
  <entry>
    <title>200517</title>
    <url>/2020/05/17/%E9%98%85%E8%AF%BB%E8%AE%BA%E6%96%87%20%E2%80%9CLarge%20Scale%20Image%20Segmentation%20with%20Structured%20Loss%20based%20Deep%20Learning%20forConnectome%20Reconstruction%E2%80%9D%20%EF%BC%88MALA-TPAMI/</url>
    <content><![CDATA[<p>Connectome Reconstruction” （MALA-TPAMI 2018）</p>
<p><img src="/2020/05/17/%E9%98%85%E8%AF%BB%E8%AE%BA%E6%96%87%20%E2%80%9CLarge%20Scale%20Image%20Segmentation%20with%20Structured%20Loss%20based%20Deep%20Learning%20forConnectome%20Reconstruction%E2%80%9D%20%EF%BC%88MALA-TPAMI/image-20200510153223855.png" alt></p>
<a id="more"></a>

<p>tag：EM，分割，神经元</p>
<p>特点：既可以用在isotropic block-face EM data，又可以用在 anisotropic serial sectioned EM data</p>
<p>task是神经元分割</p>
<p>输出是边界概率</p>
<p>结合了亲和图预测</p>
<p>3D unet：预测voxels之间的亲和图，然后是迭代区域聚集</p>
<h1 id="ds"><a href="#ds" class="headerlink" title="ds"></a>ds</h1><h1 id="results"><a href="#results" class="headerlink" title="results"></a>results</h1><p><img src="/2020/05/17/%E9%98%85%E8%AF%BB%E8%AE%BA%E6%96%87%20%E2%80%9CLarge%20Scale%20Image%20Segmentation%20with%20Structured%20Loss%20based%20Deep%20Learning%20forConnectome%20Reconstruction%E2%80%9D%20%EF%BC%88MALA-TPAMI/C:%5CUsers%5C76384%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200510182236597.png" alt="image-20200510182236597"></p>
<p><img src="/2020/05/17/%E9%98%85%E8%AF%BB%E8%AE%BA%E6%96%87%20%E2%80%9CLarge%20Scale%20Image%20Segmentation%20with%20Structured%20Loss%20based%20Deep%20Learning%20forConnectome%20Reconstruction%E2%80%9D%20%EF%BC%88MALA-TPAMI/C:%5CUsers%5C76384%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200510211913155.png" alt="image-20200510211913155"></p>
<p><img src="/2020/05/17/%E9%98%85%E8%AF%BB%E8%AE%BA%E6%96%87%20%E2%80%9CLarge%20Scale%20Image%20Segmentation%20with%20Structured%20Loss%20based%20Deep%20Learning%20forConnectome%20Reconstruction%E2%80%9D%20%EF%BC%88MALA-TPAMI/C:%5CUsers%5C76384%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200510212051333.png" alt="image-20200510212051333"></p>
<ol>
<li>用3D U-Net预测3D 亲和图(affinity graphs)，loss是基于MALIS的structured loss，来最小化拓扑误差</li>
<li>改进原来的MALIS loss function：在所有predicted的亲和图上预测梯度，而不是稀疏得采样。这样使得梯度计算更快更dense<ol>
<li>并且分两遍计算MALIS损失：在正遍中，将GT区域之间和GT区域外的亲和图限制为0；在负遍中，将区域内的亲和图设置为1。</li>
</ol>
</li>
<li></li>
</ol>
]]></content>
      <tags>
        <tag>Segmentation</tag>
        <tag>brain</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu 踩坑记录</title>
    <url>/2021/03/26/ubuntu%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="ubuntu-踩坑记录"><a href="#ubuntu-踩坑记录" class="headerlink" title="ubuntu 踩坑记录"></a>ubuntu 踩坑记录</h1><h2 id="显卡驱动重装"><a href="#显卡驱动重装" class="headerlink" title="显卡驱动重装"></a>显卡驱动重装</h2><p>某次装好后，遇到bug：</p>
<blockquote>
<p>Can’t run remote python interpreter: OCI runtime create failed: container_linux.go:367: starting container process caused: process_linux.go:495: container init caused: Running hook #1:: error running hook: exit status 1, stdout: , stderr: nvidia-container-cli: initialization error: driver error: failed to process request: unknown</p>
</blockquote>
<a id="more"></a>

<p>docker 里nvidia-smi不能用了，直接在docker外nvidia-smi也报错：</p>
<blockquote>
<p>NVIDIA-SMI couldn’t find libnvidia-ml.so library in your system. Please make sure that the NVIDIA Display Driver is properly installed and present in your system. Please also try adding directory that contains libnvidia-ml.so to your system PATH.</p>
</blockquote>
<p>估计是什么时候update弄成的。</p>
<p>解决方法：重装显卡驱动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># BTW this is all in console mode (for me, alt+ctrl+F2)</span></span><br><span class="line"><span class="comment"># login + password as usual</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># removing ALL nvidia software</span></span><br><span class="line">$ sudo apt-get purge nvidia* </span><br><span class="line"></span><br><span class="line"><span class="comment"># Checking what's left:</span></span><br><span class="line">$ dpkg -l | grep nvidia</span><br><span class="line"><span class="comment"># Then I deleted the ones that showed up (mostly libnvidia-* but also xserver-xorg-video-nvidia-xxx`)</span></span><br><span class="line">$ sudo apt-get purge libnvidia* xserver-xorg-video-nvidia-440 </span><br><span class="line">$ sudo apt autoremove <span class="comment"># clean it up</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># now reinstall everything including nvidia-common</span></span><br><span class="line">$ sudo apt-get nvidia-common</span><br><span class="line"></span><br><span class="line"><span class="comment"># find the right driver again</span></span><br><span class="line">$ sudo add-apt-repository ppa:graphics-drivers/ppa</span><br><span class="line">$ sudo apt update</span><br><span class="line">$ ubuntu-drivers devices</span><br><span class="line">$ sudo apt-get install nvidia-driver-460 <span class="comment"># the recommended one by ubuntu-drivers</span></span><br><span class="line">$ update-initramfs -u <span class="comment"># needed to do this so rebooting wouldn't lose configuration I think</span></span><br><span class="line"></span><br><span class="line">$ sudo reboot</span><br></pre></td></tr></table></figure>

<p>然后再重装NVIDIA-docker：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$curl</span> -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add -</span><br><span class="line"><span class="variable">$curl</span> -s -L https://nvidia.github.io/nvidia-docker/ubuntu18.04/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list</span><br><span class="line"><span class="variable">$sudo</span> apt-get update</span><br><span class="line"></span><br><span class="line"><span class="variable">$sudo</span> apt-get install nvidia-docker2</span><br><span class="line"><span class="variable">$sudo</span> pkill -SIGHUP dockerd</span><br><span class="line"><span class="variable">$docker</span> run --runtime=nvidia --rm nvidia/cuda nvidia-smi</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nvidia-docker run --rm nvidia/cuda:10.1-devel nvidia-smi</span><br></pre></td></tr></table></figure>

<p>万幸CUDA, CuDNN都还有。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> torch</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>torch.cuda.is_available()</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=torch.randn(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.cuda()</span><br><span class="line">tensor([[<span class="number">-0.4678</span>,  <span class="number">0.1525</span>]], device=<span class="string">'cuda:0'</span>)</span><br></pre></td></tr></table></figure>

<p> 配置默认运行的是nvidia-docker 而不是 docker (<a href="https://zhuanlan.zhihu.com/p/37519492)，在/etc/docker/daemon.json" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/37519492)，在/etc/docker/daemon.json</a> 文件中配置如下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;default-runtime&quot;: &quot;nvidia&quot;,</span><br><span class="line">    &quot;runtimes&quot;: &#123;</span><br><span class="line">        &quot;nvidia&quot;: &#123;</span><br><span class="line">            &quot;path&quot;: &quot;&#x2F;usr&#x2F;bin&#x2F;nvidia-container-runtime&quot;,</span><br><span class="line">            &quot;runtimeArgs&quot;: [],</span><br><span class="line">            &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;gemfield.mirror.aliyuncs.com&quot;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="pycharm里用docker"><a href="#pycharm里用docker" class="headerlink" title="pycharm里用docker"></a>pycharm里用docker</h2><p>python 位置：/home/shiyuuuu/anaconda3/bin/python</p>
<p><img src="/2021/03/26/ubuntu%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/image-20210326170845579.png" alt="image-20210326170845579"></p>
]]></content>
      <categories>
        <category>ubuntu</category>
        <category>bug</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>bug</tag>
        <tag>docker</tag>
      </tags>
  </entry>
</search>
