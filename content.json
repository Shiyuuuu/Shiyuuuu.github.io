{"meta":{"title":"Shiyu's Blog","subtitle":"Learn to live.","description":null,"author":"Shiyu","url":"https://shiyuuuu.github.io","root":"/"},"pages":[{"title":"关于","date":"2020-06-16T14:25:04.285Z","updated":"2020-06-16T14:25:04.285Z","comments":true,"path":"about/index.html","permalink":"https://shiyuuuu.github.io/about/index.html","excerpt":"","text":"一枚CS小学生。"},{"title":"所有分类","date":"2020-06-16T14:35:16.334Z","updated":"2020-06-16T14:35:16.334Z","comments":true,"path":"categories/index.html","permalink":"https://shiyuuuu.github.io/categories/index.html","excerpt":"","text":""},{"title":"404 Not Found","date":"2020-06-16T14:38:40.429Z","updated":"2020-06-16T14:38:40.429Z","comments":true,"path":"404.html","permalink":"https://shiyuuuu.github.io/404.html","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除"},{"title":"所有标签","date":"2020-06-16T14:40:26.972Z","updated":"2020-06-16T14:40:26.972Z","comments":true,"path":"tags/index.html","permalink":"https://shiyuuuu.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"ubuntu 踩坑记录","slug":"ubuntu踩坑记录","date":"2021-03-25T16:00:00.000Z","updated":"2021-03-26T10:00:08.290Z","comments":true,"path":"2021/03/26/ubuntu踩坑记录/","link":"","permalink":"https://shiyuuuu.github.io/2021/03/26/ubuntu%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/","excerpt":"ubuntu 踩坑记录显卡驱动重装某次装好后，遇到bug： Can’t run remote python interpreter: OCI runtime create failed: container_linux.go:367: starting container process caused: process_linux.go:495: container init caused: Running hook #1:: error running hook: exit status 1, stdout: , stderr: nvidia-container-cli: initialization error: driver error: failed to process request: unknown","text":"ubuntu 踩坑记录显卡驱动重装某次装好后，遇到bug： Can’t run remote python interpreter: OCI runtime create failed: container_linux.go:367: starting container process caused: process_linux.go:495: container init caused: Running hook #1:: error running hook: exit status 1, stdout: , stderr: nvidia-container-cli: initialization error: driver error: failed to process request: unknown docker 里nvidia-smi不能用了，直接在docker外nvidia-smi也报错： NVIDIA-SMI couldn’t find libnvidia-ml.so library in your system. Please make sure that the NVIDIA Display Driver is properly installed and present in your system. Please also try adding directory that contains libnvidia-ml.so to your system PATH. 估计是什么时候update弄成的。 解决方法：重装显卡驱动 1234567891011121314151617181920212223# BTW this is all in console mode (for me, alt+ctrl+F2)# login + password as usual# removing ALL nvidia software$ sudo apt-get purge nvidia* # Checking what's left:$ dpkg -l | grep nvidia# Then I deleted the ones that showed up (mostly libnvidia-* but also xserver-xorg-video-nvidia-xxx`)$ sudo apt-get purge libnvidia* xserver-xorg-video-nvidia-440 $ sudo apt autoremove # clean it up# now reinstall everything including nvidia-common$ sudo apt-get nvidia-common# find the right driver again$ sudo add-apt-repository ppa:graphics-drivers/ppa$ sudo apt update$ ubuntu-drivers devices$ sudo apt-get install nvidia-driver-460 # the recommended one by ubuntu-drivers$ update-initramfs -u # needed to do this so rebooting wouldn't lose configuration I think$ sudo reboot 然后再重装NVIDIA-docker： 1234567$curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add -$curl -s -L https://nvidia.github.io/nvidia-docker/ubuntu18.04/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list$sudo apt-get update$sudo apt-get install nvidia-docker2$sudo pkill -SIGHUP dockerd$docker run --runtime=nvidia --rm nvidia/cuda nvidia-smi 测试： 1sudo nvidia-docker run --rm nvidia/cuda:10.1-devel nvidia-smi 万幸CUDA, CuDNN都还有。 123456&gt;&gt;&gt; import torch&gt;&gt;&gt; torch.cuda.is_available()True&gt;&gt;&gt; a=torch.randn(1,2)&gt;&gt;&gt; a.cuda()tensor([[-0.4678, 0.1525]], device='cuda:0') 配置默认运行的是nvidia-docker 而不是 docker (https://zhuanlan.zhihu.com/p/37519492)，在/etc/docker/daemon.json 文件中配置如下内容： 12345678910&#123; &quot;default-runtime&quot;: &quot;nvidia&quot;, &quot;runtimes&quot;: &#123; &quot;nvidia&quot;: &#123; &quot;path&quot;: &quot;&#x2F;usr&#x2F;bin&#x2F;nvidia-container-runtime&quot;, &quot;runtimeArgs&quot;: [], &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;gemfield.mirror.aliyuncs.com&quot;] &#125; &#125;&#125; pycharm里用dockerpython 位置：/home/shiyuuuu/anaconda3/bin/python","categories":[{"name":"ubuntu","slug":"ubuntu","permalink":"https://shiyuuuu.github.io/categories/ubuntu/"},{"name":"bug","slug":"ubuntu/bug","permalink":"https://shiyuuuu.github.io/categories/ubuntu/bug/"}],"tags":[{"name":"ubuntu","slug":"ubuntu","permalink":"https://shiyuuuu.github.io/tags/ubuntu/"},{"name":"bug","slug":"bug","permalink":"https://shiyuuuu.github.io/tags/bug/"},{"name":"docker","slug":"docker","permalink":"https://shiyuuuu.github.io/tags/docker/"}]},{"title":"1-两数之和","slug":"1_两数之和","date":"2021-03-25T16:00:00.000Z","updated":"2021-03-26T11:46:07.301Z","comments":true,"path":"2021/03/26/1_两数之和/","link":"","permalink":"https://shiyuuuu.github.io/2021/03/26/1_%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/","excerpt":"1. 两数之和https://leetcode-cn.com/problems/two-sum 题目给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 的那 两个 整数，并返回它们的数组下标。","text":"1. 两数之和https://leetcode-cn.com/problems/two-sum 题目给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 的那 两个 整数，并返回它们的数组下标。 你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。你可以按任意顺序返回答案。 示例 1： 输入：nums = [2,7,11,15], target = 9输出：[0,1]解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。 示例 2： 输入：nums = [3,2,4], target = 6输出：[1,2] 示例 3 输入：nums = [3,3], target = 6输出：[0,1] 提示： 2 &lt;= nums.length &lt;= 103-109 &lt;= nums[i] &lt;= 109-109 &lt;= target &lt;= 109只会存在一个有效答案 暴力解答我自己的解答：非常暴力检索，第一个: i 从0到n，第二个: j 从i+1 到n（或者倒序来）。这样复杂度是O(n^2) 123456class Solution: def twoSum(self, nums: List[int], target: int) -&gt; List[int]: for i in range(len(nums)): for j in range(i+1,len(nums)): if nums[i]+nums[j]==target: return [i,j] 12345678class Solution: def twoSum(self, nums: List[int], target: int) -&gt; List[int]: # nums_sorted=sorted(nums) for i in range(len(nums)): for j in range(len(nums)-1,i,-1): if nums[i]+nums[j]==target: c=sorted([i,j]) return c 哈希表思路及算法注意到方法一的时间复杂度较高的原因是寻找 target - x 的时间复杂度过高。因此，我们需要一种更优秀的方法，能够快速寻找数组中是否存在目标元素。如果存在，我们需要找出它的索引。 使用哈希表，可以将寻找 target - x 的时间复杂度降低到从 O(N) 降低到 O(1)。 这样我们创建一个哈希表，对于每一个 x，我们首先查询哈希表中是否存在 target - x，然后将 x 插入到哈希表中，即可保证不会让 x 和自己匹配。 先建立一个空字典，查找target-num是不是hashtable的键值，如果是，直接return，如果不是，把这个num-i对以键值对的形式添加入字典。哈希表查找元素的复杂度为O(1) 代码 1234567891011121314151617181920from typing import Listclass Solution: def twoSum(self, nums: List[int], target: int) -&gt; List[int]: hashtable = dict() for i, num in enumerate(nums): if target - num in hashtable: return [hashtable[target - num], i] hashtable[nums[i]] = i return []s=Solution()# nums=[2,7,11,15]# target=9# nums = [3,2,4]# target = 6nums = [3,3]target = 6a=s.twoSum(nums,target)print(a) 复杂度分析时间复杂度：O(N)，其中 N是数组中的元素数量。对于每一个元素 x，我们可以 O(1) 地寻找 target - x。 空间复杂度：O(N)，其中 N 是数组中的元素数量。主要为哈希表的开销。","categories":[{"name":"LeetCode","slug":"LeetCode","permalink":"https://shiyuuuu.github.io/categories/LeetCode/"},{"name":"easy","slug":"LeetCode/easy","permalink":"https://shiyuuuu.github.io/categories/LeetCode/easy/"},{"name":"algorithm","slug":"algorithm","permalink":"https://shiyuuuu.github.io/categories/algorithm/"},{"name":"哈希表","slug":"algorithm/哈希表","permalink":"https://shiyuuuu.github.io/categories/algorithm/%E5%93%88%E5%B8%8C%E8%A1%A8/"}],"tags":[{"name":"哈希表","slug":"哈希表","permalink":"https://shiyuuuu.github.io/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"},{"name":"leetcode","slug":"leetcode","permalink":"https://shiyuuuu.github.io/tags/leetcode/"}]},{"title":"哈希表","slug":"哈希表","date":"2021-03-25T16:00:00.000Z","updated":"2021-03-26T11:51:55.495Z","comments":true,"path":"2021/03/26/哈希表/","link":"","permalink":"https://shiyuuuu.github.io/2021/03/26/%E5%93%88%E5%B8%8C%E8%A1%A8/","excerpt":"","text":"哈希表Hash Table，也叫散列表。力扣-两数之和","categories":[{"name":"algorithm","slug":"algorithm","permalink":"https://shiyuuuu.github.io/categories/algorithm/"},{"name":"哈希表","slug":"algorithm/哈希表","permalink":"https://shiyuuuu.github.io/categories/algorithm/%E5%93%88%E5%B8%8C%E8%A1%A8/"}],"tags":[{"name":"哈希表","slug":"哈希表","permalink":"https://shiyuuuu.github.io/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"}]}],"categories":[{"name":"ubuntu","slug":"ubuntu","permalink":"https://shiyuuuu.github.io/categories/ubuntu/"},{"name":"bug","slug":"ubuntu/bug","permalink":"https://shiyuuuu.github.io/categories/ubuntu/bug/"},{"name":"LeetCode","slug":"LeetCode","permalink":"https://shiyuuuu.github.io/categories/LeetCode/"},{"name":"easy","slug":"LeetCode/easy","permalink":"https://shiyuuuu.github.io/categories/LeetCode/easy/"},{"name":"algorithm","slug":"algorithm","permalink":"https://shiyuuuu.github.io/categories/algorithm/"},{"name":"哈希表","slug":"algorithm/哈希表","permalink":"https://shiyuuuu.github.io/categories/algorithm/%E5%93%88%E5%B8%8C%E8%A1%A8/"}],"tags":[{"name":"ubuntu","slug":"ubuntu","permalink":"https://shiyuuuu.github.io/tags/ubuntu/"},{"name":"bug","slug":"bug","permalink":"https://shiyuuuu.github.io/tags/bug/"},{"name":"docker","slug":"docker","permalink":"https://shiyuuuu.github.io/tags/docker/"},{"name":"哈希表","slug":"哈希表","permalink":"https://shiyuuuu.github.io/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"},{"name":"leetcode","slug":"leetcode","permalink":"https://shiyuuuu.github.io/tags/leetcode/"}]}